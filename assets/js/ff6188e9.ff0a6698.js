(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4263],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},953:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=n(22122),a=n(19756),o=(n(67294),n(3905)),i={sidebar_label:"core",title:"fido.core"},l={unversionedId:"reference/fido/core",id:"reference/fido/core",isDocsHomePage:!1,title:"fido.core",description:"Core",source:"@site/docs/reference/fido/core.md",sourceDirName:"reference/fido",slug:"/reference/fido/core",permalink:"/fido/docs/reference/fido/core",editUrl:"https://github.com/hojulian/fido/edit/documentation/docs/docs/reference/fido/core.md",version:"current",sidebar_label:"core",frontMatter:{sidebar_label:"core",title:"fido.core"},sidebar:"apiSidebar",previous:{title:"fido.config",permalink:"/fido/docs/reference/fido/config"},next:{title:"fido.errors",permalink:"/fido/docs/reference/fido/errors"}},s=[{value:"Core",id:"core",children:[{value:"create_container",id:"create_container",children:[]},{value:"start_container",id:"start_container",children:[]},{value:"container_exec",id:"container_exec",children:[]},{value:"remove_container",id:"remove_container",children:[]},{value:"generate_sim_id",id:"generate_sim_id",children:[]},{value:"generate_port",id:"generate_port",children:[]},{value:"set_docker_host",id:"set_docker_host",children:[]},{value:"set_logging",id:"set_logging",children:[]}]}],c={toc:s};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"core"},"Core"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Core(object)\n")),(0,o.kt)("p",null,"Core provides utility functions for Fido internal use."),(0,o.kt)("h3",{id:"create_container"},"create","_","container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},' | @classmethod\n | def create_container(cls, sim_id: str, volume: str, image: str = "cosi119/fido-simulation:base", vnc_port: str = "6080", rosbridge_port: str = "9090") -> str\n')),(0,o.kt)("p",null,"Create a docker container with the given image and volume."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sim_id")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Simulation ID. Should be unique among simulations."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"volume")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Path to local catkin workspace used by the simulation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"image")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Docker image for running simulation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"vnc_port")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Port of noVNC. Should be unique among simulations."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rosbridge_port")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Port of rosbridge. Should be unique among simulations.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"  The container ID."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DockerError")," - If failed to create container.")),(0,o.kt)("h3",{id:"start_container"},"start","_","container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | @classmethod\n | def start_container(cls, container_id: str) -> None\n")),(0,o.kt)("p",null,"Start container by ID."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"container_id")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Docker container ID.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DockerError")," - If failed to start container.")),(0,o.kt)("h3",{id:"container_exec"},"container","_","exec"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},' | @classmethod\n | def container_exec(cls, container_id: str, cmd: str, workdir: str = "/workspace/fido_ws", env: Mapping[str, str] = {}, stream: bool = False) -> ExecResult\n')),(0,o.kt)("p",null,"Execute command on container."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"container_id")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Docker container ID."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cmd")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Command to execute."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"workdir")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Path to working directory for this exec session."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"env")," ",(0,o.kt)("em",{parentName:"li"},"dict")," - A dictionary of strings in the following format"),(0,o.kt)("li",{parentName:"ul"},"`",(0,o.kt)("inlineCode",{parentName:"li"},'{"PASSWORD"'),' - "xxx"}`.'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"stream")," ",(0,o.kt)("em",{parentName:"li"},"bool")," - Stream response data. Default: False.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"  A tuple of (exit_code, output)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"exit_code")," - (int):\nExit code for the executed command or None if stream is True."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"output")," - (generator, bytes, or tuple):\nIf ",(0,o.kt)("inlineCode",{parentName:"li"},"stream=True"),", a generator yielding response chunks. A bytestring\ncontaining response data otherwise.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DockerError")," - If failed to execute command on container.")),(0,o.kt)("h3",{id:"remove_container"},"remove","_","container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | @classmethod\n | def remove_container(cls, container_id: str, force: bool = True) -> None\n")),(0,o.kt)("p",null,"Remove container by ID."),(0,o.kt)("p",null,"This will remove the container along with its volume."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"container_id")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Docker container ID."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"force")," ",(0,o.kt)("em",{parentName:"li"},"bool")," - Force the removal of a running container (uses ",(0,o.kt)("inlineCode",{parentName:"li"},"SIGKILL"),").")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DockerError")," - If failed to remove container.")),(0,o.kt)("h3",{id:"generate_sim_id"},"generate","_","sim","_","id"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | @classmethod\n | def generate_sim_id(cls) -> str\n")),(0,o.kt)("p",null,"Generate random simulation ID."),(0,o.kt)("p",null,"The generated ID is guaranteed to be unique during the runtime of this process."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"  A random simulation ID in the form of UUID."),(0,o.kt)("h3",{id:"generate_port"},"generate","_","port"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | @classmethod\n | def generate_port(cls) -> int\n")),(0,o.kt)("p",null,"Generate random port number."),(0,o.kt)("p",null,"The generated port is guaranteed to be unique during the runtime of this\nprocess."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"  A random port number."),(0,o.kt)("h3",{id:"set_docker_host"},"set","_","docker","_","host"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},' | @classmethod\n | def set_docker_host(cls, base_url: str = "unix:///var/run/docker.sock", version: str = "1.35") -> None\n')),(0,o.kt)("p",null,"Set the Docker client connection details."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"base_url")," ",(0,o.kt)("em",{parentName:"li"},"str")," - URL to Docker server. For example,\n",(0,o.kt)("inlineCode",{parentName:"li"},"unix:///var/run/docker.sock")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"tcp://127.0.0.1:1234"),". Default:\n",(0,o.kt)("inlineCode",{parentName:"li"},"unix:///var/run/docker.sock"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"version")," ",(0,o.kt)("em",{parentName:"li"},"str")," - The version of the API to use. Set to ",(0,o.kt)("inlineCode",{parentName:"li"},"auto")," to\nautomatically detect the server's version. Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"1.35"),".")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DockerError")," - If the specified Docker server does not exist, or failed to\nconnect.")),(0,o.kt)("h3",{id:"set_logging"},"set","_","logging"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | @classmethod\n | def set_logging(cls, node_name: str, level: str) -> None\n")),(0,o.kt)("p",null,"Enable logging for a given node, and its logging level."),(0,o.kt)("p",null,"This is a legacy feature inherited from ",(0,o.kt)("inlineCode",{parentName:"p"},"robot_services"),". See\n",(0,o.kt)("inlineCode",{parentName:"p"},"robot_services"),"'s documentation for more details."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node_name")," ",(0,o.kt)("em",{parentName:"li"},"str")," - The name of the node."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level")," ",(0,o.kt)("em",{parentName:"li"},"str")," - Description of the log's type.")))}p.isMDXComponent=!0}}]);