(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2460],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(r),f=o,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||s;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},16645:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return p},default:function(){return l}});var n=r(22122),o=r(19756),s=(r(67294),r(3905)),a={sidebar_label:"dtypes",title:"fido.dtypes.dtypes"},i={unversionedId:"reference/fido/dtypes/dtypes",id:"reference/fido/dtypes/dtypes",isDocsHomePage:!1,title:"fido.dtypes.dtypes",description:"DType",source:"@site/docs/reference/fido/dtypes/dtypes.md",sourceDirName:"reference/fido/dtypes",slug:"/reference/fido/dtypes/dtypes",permalink:"/fido/docs/reference/fido/dtypes/dtypes",editUrl:"https://github.com/hojulian/fido/edit/documentation/docs/docs/reference/fido/dtypes/dtypes.md",version:"current",sidebar_label:"dtypes",frontMatter:{sidebar_label:"dtypes",title:"fido.dtypes.dtypes"},sidebar:"apiSidebar",previous:{title:"API Reference",permalink:"/fido/docs/reference/api"},next:{title:"fido.robot.component.sensor",permalink:"/fido/docs/reference/fido/robot/component/sensor"}},p=[{value:"DType",id:"dtype",children:[]},{value:"Odom",id:"odom",children:[]},{value:"Twist",id:"twist",children:[]},{value:"LaserScan",id:"laserscan",children:[]},{value:"Image",id:"image",children:[]}],c={toc:p};function l(e){var t=e.components,r=(0,o.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"dtype"},"DType"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class DType(Protocol)\n")),(0,s.kt)("p",null,"Represents the type of the element used by sensors and components."),(0,s.kt)("p",null,"It is implemented as a wrapper around common ROS messages."),(0,s.kt)("h2",{id:"odom"},"Odom"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Odom(DType)\n")),(0,s.kt)("p",null,"Represents a odometry state."),(0,s.kt)("p",null,"This is equivalent to ROS's nav_msgs/Odometry."),(0,s.kt)("h2",{id:"twist"},"Twist"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(repr=True)\nclass Twist(DType)\n")),(0,s.kt)("p",null,"Represents a twist message."),(0,s.kt)("p",null,"This is equivalent to ROS's geometry_msgs/Twist."),(0,s.kt)("h2",{id:"laserscan"},"LaserScan"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(frozen=True, repr=True)\nclass LaserScan(DType)\n")),(0,s.kt)("p",null,"Represents a laser scan in 360 degrees."),(0,s.kt)("p",null,"This is equivalent to ROS's sensor_msgs/LaserScan."),(0,s.kt)("h2",{id:"image"},"Image"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(frozen=True, repr=True)\nclass Image(DType)\n")),(0,s.kt)("p",null,"Represents an image."),(0,s.kt)("p",null,"This is equivalent to ROS's sensor_msgs/Image."))}l.isMDXComponent=!0}}]);