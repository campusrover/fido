(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[967],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88065:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var i=n(22122),a=n(19756),r=(n(67294),n(3905)),o={sidebar_label:"simulation",title:"fido.simulation.simulation"},l={unversionedId:"reference/fido/simulation/simulation",id:"reference/fido/simulation/simulation",isDocsHomePage:!1,title:"fido.simulation.simulation",description:"Simulation",source:"@site/docs/reference/fido/simulation/simulation.md",sourceDirName:"reference/fido/simulation",slug:"/reference/fido/simulation/simulation",permalink:"/fido/docs/reference/fido/simulation/simulation",editUrl:"https://github.com/hojulian/fido/edit/documentation/docs/docs/reference/fido/simulation/simulation.md",version:"current",sidebar_label:"simulation",frontMatter:{sidebar_label:"simulation",title:"fido.simulation.simulation"},sidebar:"apiSidebar",previous:{title:"fido.simulation.gazebo",permalink:"/fido/docs/reference/fido/simulation/gazebo"},next:{title:"fido.simulation.simulator",permalink:"/fido/docs/reference/fido/simulation/simulator"}},s=[{value:"Simulation",id:"simulation",children:[{value:"start",id:"start",children:[]},{value:"ros",id:"ros",children:[]},{value:"stop",id:"stop",children:[]},{value:"reset",id:"reset",children:[]},{value:"destroy",id:"destroy",children:[]},{value:"view",id:"view",children:[]},{value:"container_id",id:"container_id",children:[]},{value:"vnc_port",id:"vnc_port",children:[]},{value:"time",id:"time",children:[]}]}],u={toc:s};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"simulation"},"Simulation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Simulation(object)\n")),(0,r.kt)("p",null,"Represents a single simulation."),(0,r.kt)("p",null,"A simulation is made out of two things: a world ",(0,r.kt)("inlineCode",{parentName:"p"},"fido.world.World")," and a\nsimulator ",(0,r.kt)("inlineCode",{parentName:"p"},"fido.simulation.Simulator")," for running the simulation."),(0,r.kt)("p",null,"Note that both the simulator and world need to be compatible."),(0,r.kt)("p",null,"When a Simulation is created, it will first initialize by loading all the external\nworld and robot files using rosinstall. Then, it will create a docker container with\nthe files attached to the catkin workspace. The container created will be in a pause\nstate. To start the container and simulation, call ",(0,r.kt)("inlineCode",{parentName:"p"},"start()"),"."),(0,r.kt)("h3",{id:"start"},"start"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | def start() -> None\n")),(0,r.kt)("p",null,"Start the simulation."),(0,r.kt)("p",null,"Multiple simulations can be started at the same time. This is a\nblocking call, it will block until the Simulator is successfully\nstarted."),(0,r.kt)("p",null,"Internally, if the simulation is not initialized, it creates a new docker\ncontainer containing the ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulator"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"World"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Robot")," needed for the\nsimulation. Once the container is started, it will first build all the packages\nin the directory using catkin_make. Then, fido will start the simulation by\nlaunching the launch file on a separate thread. Once the launch file is ready,\nfido will create apersistent connection with ROS master running in the container\nusing rosbridge."),(0,r.kt)("p",null,"If the simulation is initialized, it will simply call ",(0,r.kt)("inlineCode",{parentName:"p"},"start()")," of the\nunderlying simulator."),(0,r.kt)("h3",{id:"ros"},"ros"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | def ros() -> Ros\n")),(0,r.kt)("p",null,"Returns the ros client."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  The ROS client."),(0,r.kt)("h3",{id:"stop"},"stop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | def stop() -> None\n")),(0,r.kt)("p",null,"Stop the simulation."),(0,r.kt)("p",null,"This will pause the simulator engine. Note that this is not sufficient\nto end the simulation completely, this merely pauses the simulation."),(0,r.kt)("p",null,"To end a simulation, use ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulation.destroy()"),". It is not necessary\nto call ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulation.stop()")," before ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulation.destroy()"),"."),(0,r.kt)("h3",{id:"reset"},"reset"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | def reset() -> None\n")),(0,r.kt)("p",null,"Reset the simulation."),(0,r.kt)("p",null,"This will cause the simulation to reset itself to its original state.\nIt allows the simulation to reset without doing ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulation.destroy()"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"Simulation.start()"),"."),(0,r.kt)("p",null,"This is useful in machine learning applications where each iteration\nrequires a fresh state."),(0,r.kt)("p",null,"The exact reset behavior depends on the underlying simulator\nimplementation."),(0,r.kt)("h3",{id:"destroy"},"destroy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | def destroy() -> None\n")),(0,r.kt)("p",null,"Destroy the simulation."),(0,r.kt)("p",null,"This will forcefully destroy the container containing the simulation."),(0,r.kt)("p",null,"Once the simulation is destroyed, it can never be started again."),(0,r.kt)("h3",{id:"view"},"view"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},' | def view() -> "IFrame"\n')),(0,r.kt)("p",null,"Visualize the simulation."),(0,r.kt)("p",null,"This will display the simulation in a ",(0,r.kt)("inlineCode",{parentName:"p"},"IPython.core.display.display()"),".\nThis is compatible with Jupyter notebook."),(0,r.kt)("h3",{id:"container_id"},"container","_","id"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | def container_id() -> str\n")),(0,r.kt)("p",null,"Return the docker container ID of this simulation."),(0,r.kt)("p",null,"This is used by simulator to execute command on the underlying docker container."),(0,r.kt)("p",null,"Although not recommended, this container ID can be used with docker-cli to\naccess and manage the simulation container."),(0,r.kt)("h3",{id:"vnc_port"},"vnc","_","port"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | def vnc_port() -> str\n")),(0,r.kt)("p",null,"Return vnc port."),(0,r.kt)("p",null,"This is used by simulator for accessing the VNC viewport."),(0,r.kt)("h3",{id:"time"},"time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | def time() -> float\n")),(0,r.kt)("p",null,"Return the simulation time."),(0,r.kt)("p",null,"This can be either simulator time or wall time depending on the\n",(0,r.kt)("inlineCode",{parentName:"p"},"use_sim_time")," flag on creation."))}c.isMDXComponent=!0}}]);