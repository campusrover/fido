(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1668],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,f=u["".concat(i,".").concat(m)]||u[m]||c[m]||a;return t?r.createElement(f,l(l({ref:n},d),{},{components:t})):r.createElement(f,l({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6062:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return i},default:function(){return d}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),l={sidebar_label:"sensor",title:"fido.robot.component.sensor"},s={unversionedId:"reference/fido/robot/component/sensor",id:"reference/fido/robot/component/sensor",isDocsHomePage:!1,title:"fido.robot.component.sensor",description:"Sensor",source:"@site/docs/reference/fido/robot/component/sensor.md",sourceDirName:"reference/fido/robot/component",slug:"/reference/fido/robot/component/sensor",permalink:"/fido/docs/reference/fido/robot/component/sensor",editUrl:"https://github.com/hojulian/fido/edit/documentation/docs/docs/reference/fido/robot/component/sensor.md",version:"current",sidebar_label:"sensor",frontMatter:{sidebar_label:"sensor",title:"fido.robot.component.sensor"},sidebar:"apiSidebar",previous:{title:"fido.dtypes.dtypes",permalink:"/fido/docs/reference/fido/dtypes/dtypes"},next:{title:"fido.robot.robot",permalink:"/fido/docs/reference/fido/robot/robot"}},i=[{value:"Sensor",id:"sensor",children:[{value:"handle_updates",id:"handle_updates",children:[]}]},{value:"Odomer",id:"odomer",children:[{value:"handle_updates",id:"handle_updates-1",children:[]}]},{value:"Lidar",id:"lidar",children:[{value:"handle_updates",id:"handle_updates-2",children:[]}]}],p={toc:i};function d(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"sensor"},"Sensor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Sensor(object)\n")),(0,a.kt)("p",null,"Represents a sensor on the robot."),(0,a.kt)("p",null,"Internally, a sensor listens to a specific ROS topic and updates the robot","'","s\ninternal state. For instance, a Odomer listens to the /odom topic and update the\nrobot","'","s ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"y"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"z")," coordinates. A sensor only starts listening to updates once\nthe simulation has started. It will stop updating once the simulation is destroyed."),(0,a.kt)("h3",{id:"handle_updates"},"handle","_","updates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},' | @abstractmethod\n | def handle_updates(ros: "Ros") -> Callable[[], None]\n')),(0,a.kt)("p",null,"Handle incoming update from ROS topic and update robot","'","s state accordingly."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ros")," ",(0,a.kt)("em",{parentName:"li"},"Ros")," - ROS client.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A callback for unsubscribing the topic."),(0,a.kt)("h2",{id:"odomer"},"Odomer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Odomer(Sensor)\n")),(0,a.kt)("p",null,"Represents an Odometry updater."),(0,a.kt)("h3",{id:"handle_updates-1"},"handle","_","updates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},' | def handle_updates(ros: "Ros") -> Callable[[], None]\n')),(0,a.kt)("p",null,"Handle incoming update for ",(0,a.kt)("inlineCode",{parentName:"p"},"/odom")," topic and update robot","'","s position\naccordingly."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ros")," ",(0,a.kt)("em",{parentName:"li"},"Ros")," - ROS client.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A callback for unsubscribing the topic."),(0,a.kt)("h2",{id:"lidar"},"Lidar"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Lidar(Sensor)\n")),(0,a.kt)("p",null,"Represents a Lidar sensor."),(0,a.kt)("h3",{id:"handle_updates-2"},"handle","_","updates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},' | def handle_updates(ros: "Ros") -> Callable[[], None]\n')),(0,a.kt)("p",null,"Handle incoming update for ",(0,a.kt)("inlineCode",{parentName:"p"},"/scan")," topic and update robot","'","s ranges\naccordingly."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ros")," ",(0,a.kt)("em",{parentName:"li"},"Ros")," - ROS client.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A callback for unsubscribing the topic."))}d.isMDXComponent=!0}}]);